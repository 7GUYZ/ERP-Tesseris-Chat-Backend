[실시간 채팅 시스템 주요 구성 및 동작 요약]

1. WebSocketConfig.java
----------------------
- WebSocket 엔드포인트(/ws) 등록 및 SockJS 지원
- 메시지 브로커 설정: /app(서버수신), /topic(클라이언트구독)
- SessionDisconnectEvent: 세션이 끊길 때 채팅방에서 세션 제거
- SessionSubscribeEvent: /topic/{roomId} 구독 시 해당 방에 세션 등록

2. ChatRoomService.java
----------------------
- 채팅방 목록 관리 (roomId -> ChatRoom)
- 채팅방별 세션 관리 (roomId -> Set<sessionId>)
- 세션별 채팅방 관리 (sessionId -> roomId)
- joinRoom: 사용자가 방에 입장할 때 세션 등록
- leaveRoom: 사용자가 방에서 퇴장할 때 세션 제거
- getRoomUserCount: 방의 현재 접속자(세션) 수 반환
- getRoomSessions: 방의 세션ID 목록 반환
- getAllRoomUserCounts: 모든 방의 접속자 수 반환

3. ChatController.java
----------------------
- /chat/room (POST): 채팅방 생성 및 /topic/rooms로 브로드캐스트
- /chat/rooms (GET): 모든 채팅방 목록 조회
- /chat/room/{roomId} (GET): 특정 채팅방 정보 조회
- /chat/room/{roomId}/users/count (GET): 특정 방 접속자 수 조회
- /chat/rooms/users/count (GET): 모든 방 접속자 수 조회
- /chat/room/{roomId}/sessions (GET): 특정 방 세션ID 목록 조회
- @MessageMapping("/chat.sendMessage/{roomId}"): 메시지 송신 시 /topic/{roomId}로 브로드캐스트
- @SubscribeMapping("/topic/{roomId}"): (참고용) 구독 시 호출, 실제 세션 관리는 WebSocketConfig에서 처리

[전체 흐름]
- 클라이언트가 /ws로 WebSocket 연결 → /topic/{roomId} 구독 → SessionSubscribeEvent로 세션 등록
- 메시지 송수신은 /app/chat.sendMessage/{roomId} → /topic/{roomId}로 전달
- 연결 해제/브라우저 종료 시 SessionDisconnectEvent로 세션 자동 제거
- REST API로 실시간 접속자 수, 세션 목록 등 조회 가능 